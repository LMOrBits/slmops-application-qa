/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlaygroundImport } from './routes/playground'
import { Route as LoginImport } from './routes/login'
import { Route as PlaygroundChatImport } from './routes/playground.chat'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const PlaygroundRoute = PlaygroundImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const PlaygroundChatRoute = PlaygroundChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => PlaygroundRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/playground/chat': {
      id: '/playground/chat'
      path: '/chat'
      fullPath: '/playground/chat'
      preLoaderRoute: typeof PlaygroundChatImport
      parentRoute: typeof PlaygroundImport
    }
  }
}

// Create and export the route tree

interface PlaygroundRouteChildren {
  PlaygroundChatRoute: typeof PlaygroundChatRoute
}

const PlaygroundRouteChildren: PlaygroundRouteChildren = {
  PlaygroundChatRoute: PlaygroundChatRoute,
}

const PlaygroundRouteWithChildren = PlaygroundRoute._addFileChildren(
  PlaygroundRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/playground': typeof PlaygroundRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/playground/chat': typeof PlaygroundChatRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/playground': typeof PlaygroundRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/playground/chat': typeof PlaygroundChatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/login': typeof LoginRoute
  '/playground': typeof PlaygroundRouteWithChildren
  '/about': typeof AboutLazyRoute
  '/playground/chat': typeof PlaygroundChatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/login' | '/playground' | '/about' | '/playground/chat'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/login' | '/playground' | '/about' | '/playground/chat'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/playground'
    | '/about'
    | '/playground/chat'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  LoginRoute: typeof LoginRoute
  PlaygroundRoute: typeof PlaygroundRouteWithChildren
  AboutLazyRoute: typeof AboutLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  LoginRoute: LoginRoute,
  PlaygroundRoute: PlaygroundRouteWithChildren,
  AboutLazyRoute: AboutLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login",
        "/playground",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/playground": {
      "filePath": "playground.tsx",
      "children": [
        "/playground/chat"
      ]
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/playground/chat": {
      "filePath": "playground.chat.tsx",
      "parent": "/playground"
    }
  }
}
ROUTE_MANIFEST_END */
